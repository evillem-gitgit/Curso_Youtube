

'''Tem a possibilidade de acessar o ultimo elemento
 sem saber quantos elementos temos na lista.
 √à s√≥ colocar um valor negativo

lista = ["lets", 4, 8.2, False]

print(lista[-1], "Achando o ultimo da lista com N negativo(-1)")'''

####################################################

'''Metodo APPEND: Adiciona elementos no final da lista
lista = ["lets", 4, 8.2, False]
lista.append(True)
print(lista)
'''

#####################################################

'''o DEL remove uma fun√ß√£o e o deu n√£o √© metodo, √© uma fun√ß√£o
nomes = ["Ana", "Bruno", "Carlos", "Diana"]
del nomes[0]
print(nomes)
'''

#####################################################

'''Metodo REMOVE: tem que escrever qual elemento queremos remover,
n√£o pela posi√ß√£o
lista = ["lets", 4, 8.2, False]

lista.append(True)
print(lista)
lista.remove(True)
print(lista)'''

#####################################################

'''lista[1] = "foca" : Isso √© para alterar o valor
pela posi√ß√£o que vc quer substituir

lista = ["lets", "foda", "faca"]
print(lista)
lista[1] = "foca"
print(lista)
'''
#####################################################

'''Fun√ß√£o LEN(): para saber a qtd de elementos de uma lista
lista = ["lets", 4, 8.2, False]
print(len(lista))
'''
#####################################################

'''As strings tambem se comportam como listas. Da para acessar os
caracteres de uma string pela posi√ß√£o como em uma lista

str_lets_data = "Let¬¥s Data"
print(str_lets_data[6])
'''
#####################################################
"Uma vez criada a tupla, n√£o pode mais ser mudada."
"Ou seja nada de adicionar, remover, ou mudar elementos."
'''

tupla = ("lets", 4, 8.2, False)
outra_tupla = 1, 2, 3, 'de oliveira'
print(outra_tupla)
print(outra_tupla[3])
'''
#####################################################
'''conjuntos--> o elemento repetido n √© repetido quando executado.
            --> S√£o desordenado

conjunto = {"lets", 4, 8.2, False}
conjunto_dois = {1, 1, 2, 2, "lets", "lets", "data"}
print(conjunto_dois)
'''

####################################################

'''metodo add(): √© para conjuntos
                 serve para adicionar elemntos

conjunto = {"lets", 4, 8.2, False}
conjunto_dois = {1, 1, 2, 2, "lets", "lets", "data"}

conjunto_dois.add("oulha")
print(conjunto_dois)
'''
###################################################
'''metodo pop(): √© para retornar um elementos e
 tbm remove ele ao mesmo tempo

conjunto = {"lets", 4, 8.2, False}
conjunto_dois = {1, 1, 2, 2, "lets", "lets", "data"}
conjunto_dois.pop(2)
'''


'''Opera√ß√µes entre conjuntos:
üü£ Uni√£o (tudo, sem repetir):
python
Copiar c√≥digo
a = {1, 2, 3}
b = {3, 4, 5}
print(a | b)  # {1, 2, 3, 4, 5}


üîµ Interse√ß√£o (elementos em comum):
python
Copiar c√≥digo
print(a & b)  # {3}


üî¥ Diferen√ßa (o que tem em a mas n√£o em b):
python
Copiar c√≥digo
print(a - b)  # {1, 2}


üü† Diferen√ßa sim√©trica (o que s√≥ tem em um ou outro):
python
Copiar c√≥digo
print(a ^ b)  # {1, 2, 4, 5}


üß† Observa√ß√µes:
Conjuntos n√£o t√™m √≠ndice, ent√£o n√£o d√° para acessar por posi√ß√£o.

Usado quando n√£o importa a ordem e n√£o pode haver repeti√ß√µes.'''
